"""empty message

Revision ID: 0f17df0ee1a8
Revises: 
Create Date: 2024-05-01 20:28:38.516679

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0f17df0ee1a8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('card', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('card_serial',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.alter_column('unverified_serial',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.create_unique_constraint(None, ['unverified_serial'])

    with op.batch_alter_table('induction', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('inducted_on',
               existing_type=sa.DATE(),
               nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.drop_constraint('induction_machine_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('induction_inducted_by_fkey', type_='foreignkey')
        batch_op.drop_constraint('induction_member_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'member', ['member_id'], ['id'])
        batch_op.create_foreign_key(None, 'member', ['inducted_by'], ['id'])
        batch_op.create_foreign_key(None, 'machine', ['machine_id'], ['id'])

    with op.batch_alter_table('label', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.drop_constraint('label_member_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'member', ['member_id'], ['id'])

    with op.batch_alter_table('machine', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('legacy_auth',
               existing_type=postgresql.ENUM('none', 'password', 'padlock', name='legacy_machine_auth'),
               type_=sa.Enum('none', 'password', 'padlock', name='legacy_auth'),
               existing_nullable=False,
               existing_server_default=sa.text("'none'::legacy_machine_auth"))

    with op.batch_alter_table('machine_controller', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('machine_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_constraint('machine_controller_machine_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'machine', ['machine_id'], ['id'])

    with op.batch_alter_table('member', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('notes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
        batch_op.create_unique_constraint(None, ['discourse_id'])

    with op.batch_alter_table('quiz', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
        batch_op.alter_column('questions',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.alter_column('intro',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("''::text"))
        batch_op.drop_constraint('quiz_machine_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'machine', ['machine_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('quiz', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('quiz_machine_id_fkey', 'machine', ['machine_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
        batch_op.alter_column('intro',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("''::text"))
        batch_op.alter_column('questions',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('member', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('notes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('machine_controller', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('machine_controller_machine_id_fkey', 'machine', ['machine_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
        batch_op.alter_column('machine_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('machine', schema=None) as batch_op:
        batch_op.alter_column('legacy_auth',
               existing_type=sa.Enum('none', 'password', 'padlock', name='legacy_auth'),
               type_=postgresql.ENUM('none', 'password', 'padlock', name='legacy_machine_auth'),
               existing_nullable=False,
               existing_server_default=sa.text("'none'::legacy_machine_auth"))
        batch_op.alter_column('name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('label', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('label_member_id_fkey', 'member', ['member_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('induction', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('induction_member_id_fkey', 'member', ['member_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
        batch_op.create_foreign_key('induction_inducted_by_fkey', 'member', ['inducted_by'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
        batch_op.create_foreign_key('induction_machine_id_fkey', 'machine', ['machine_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
        batch_op.alter_column('inducted_on',
               existing_type=sa.DATE(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('card', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('unverified_serial',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
        batch_op.alter_column('card_serial',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    # ### end Alembic commands ###
